-> git commit -m "version 1" = will will commit and in the "" we will make a massage for this commit
-> git commit --amend -m <commit_message> = to change previous commit message
-> git push --force origin master (change the commit message name in remote as well)
-> git commit --amend --date="YYYY-MM-DD HH:MM:SS" (to commit in specific date, NOTE: firstly you have to commit the message)
-> git commit --amend --date="YYYY-MM-DD HH:MM:SS" --no-edit (to commit in specific date without changing commit message) 
-> git commit -am <commit_message> = this will automatically stage(add .) and commit the message
-> git push <remotename> <commit SHA>:<remotebranchname> (push up-to specific commit)

*) Revert & Reset Commit
    -> git reset --soft HEAD~1 (undo the last commit)
    -> git revert HEAD = to revert previous/head commit
    -> git rev-list --count <HEAD,branch> (to get total number of commit)
    -> git rev-list --all --count (to get total number of commit across all branches)

*) Custom Command to commit:
    -> git config --global alias.ac "commit -am"
            -> here we are create command 'ac' which will run command 'commit -am'
            -> git ac <commit_message>
                -> now this command will stage(add) and commit message

*) update the last commit with new files:
    -> git add .
    -> git commit --amend <commit_message> (to update the last commit by adding new files)
    -> git commit --amend --no-edit (if you don't want to change the commit message)
    
    -> NOTE: this will only work if you had not push commit on you remote repository unless:
        -> git push origin master --force (if you want to overwrite the remote commit with the state of you local code BUT not recommended that much)


*) Commit Message like pro:
    *) Commit Formats:
        -> <type>(<optional scope>): <subject>
            <optional body>
            <optional footer>
            -> <type>: 
                -> fix : use for bug fixes
                -> feat : use for code features
                -> refactor: Commits, that rewrite/restructure your code, however does not change any behaviour
                    -> perf: Commits are special refactor commits, that improve performance
                -> style: Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
                -> test: Commits, that add missing tests or correcting existing tests
                -> docs: Commits, that affect documentation only
                -> build: Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
                -> ops: Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
                -> chore: Miscellaneous commits e.g. modifying .gitignore
                -> ci: 
            -> <optional scope>:
                -> An additional information
                -> use nouns
            -> <subject>:
                -> short message
                -> write in the imperative - use add instead of adds or added
            -> <optional body>:
                -> free form
                -> explain change you've made
            -> <optional footer>:
                -> word token used
                -> Examples
                -> Resolves #10 (to close the issue)
                -> Development-Method: Pair Programming
                -> With: <name>
                -> Report-by: <name> <...@mail.com>
                -> Signed-off-by: <name> <...@mail.com>
    *) For Closing Issues:
        -> fixes: #<issues_number> <commit_message>
    *) 


*) How to add commit <subject>, <optional body>, <optional footer>
    -> git commit
        -> inside editor:
            ->  <write_subject_of_commit>

                <write_body_of_commit>

                <write_footer_of_commit>
            
            -> :wq (to write and quit)

            fix(client): fetched post data after root User route to profile page

    -> git commit -m "<type>(<optional_scope>): <subject_of_commit>" -m "<body_of_commit>" -m "<footer_of_commit>"
    
*) Recover previously committed changes which get removed upto HEAD->main:
    -> If you have accidentally removed commits up to the `HEAD` reference on the `main` branch, you can still recover them using Git's reflog and branch operations. Here's a step-by-step guide to recovering the lost commits:
        1. Verify the status of your Git repository by running `git status`. Make sure you are on the `main` branch and that the commits are truly missing.
        2. Use the command `git reflog` to view a log of all reference changes, including the lost commits. The reflog will display a history of commit references, allowing you to identify the commit you want to recover.
        3. Identify the commit hash or reference of the commit you want to recover from the reflog. It might look like `HEAD@{n}` or a specific commit hash.
        4. Create a new branch at the commit you want to recover by running `git branch recovery-branch <commit-hash>`. Replace `<commit-hash>` with the commit hash or reference you identified in the previous step.
        5. Switch to the newly created branch by running `git checkout recovery-branch`.
        6. Verify that the lost commits are now available on the `recovery-branch` by running `git log`.
        7. If everything looks correct, you can merge the `recovery-branch` back into the `main` branch using `git merge recovery-branch`. Ensure that you are on the `main` branch when executing this command.
        8. Finally, review the changes on the `main` branch and push them to your remote repository using `git push origin main`.

        By following these steps, you should be able to recover the previously committed changes and bring them back into your `main` branch.